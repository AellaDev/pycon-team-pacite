{"filter":false,"title":"customer_purchase.py","tooltip":"/python-serverless-pacite2/handlers/customer_purchase.py","undoManager":{"mark":37,"position":37,"stack":[[{"start":{"row":0,"column":0},"end":{"row":63,"column":0},"action":"insert","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    query_params = event.get(\"queryStringParameters\", {})","    product_id = query_params.get(\"product_id\") if query_params else None","    product_name = query_params.get(\"product_name\") if query_params else None","","    if not product_id and not product_name:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product ID or Product Name is required\"})","        }","","    product_model = ProductModel()","    item = None","    ","    if product_id:","        item = product_model.get_one(product_id)","    elif product_name:","        item = product_model.get_by_name(product_name)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","    ","    # Ask customer for quantity to purchase","    purchase_quantity = int(query_params.get(\"quantity\", 0))","    ","    if purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid purchase quantity\"})","        }","    ","    if purchase_quantity > item[\"quantity\"]:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": f\"Only {item['quantity']} units available\"})","        }","    ","    # Deduct from stock","    new_stock = item[\"quantity\"] - purchase_quantity","    product_model.purchase_product(item[\"product_id\"], purchase_quantity)","    ","    # Simulate asking for payment details (not implemented)","    payment_details = \"Payment process completed\"  # Placeholder","    ","    return {","        \"statusCode\": 200,","        \"headers\": {","            \"Content-Type\": \"application/json\"","        },","        \"body\": json.dumps({","            \"status\": \"success\",","            \"message\": f\"Purchased {purchase_quantity} units of {item['product_name']}\",","            \"remaining_stock\": new_stock,","            \"payment_status\": payment_details","        }, cls=DecimalEncoder)","    }",""],"id":2}],[{"start":{"row":28,"column":4},"end":{"row":29,"column":43},"action":"remove","lines":["","    # Ask customer for quantity to purchase"],"id":6}],[{"start":{"row":42,"column":4},"end":{"row":43,"column":23},"action":"remove","lines":["","    # Deduct from stock"],"id":7}],[{"start":{"row":45,"column":4},"end":{"row":46,"column":59},"action":"remove","lines":["","    # Simulate asking for payment details (not implemented)"],"id":8}],[{"start":{"row":46,"column":50},"end":{"row":46,"column":64},"action":"remove","lines":[" # Placeholder"],"id":9},{"start":{"row":46,"column":49},"end":{"row":46,"column":50},"action":"remove","lines":[" "]}],[{"start":{"row":0,"column":0},"end":{"row":60,"column":0},"action":"remove","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    query_params = event.get(\"queryStringParameters\", {})","    product_id = query_params.get(\"product_id\") if query_params else None","    product_name = query_params.get(\"product_name\") if query_params else None","","    if not product_id and not product_name:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product ID or Product Name is required\"})","        }","","    product_model = ProductModel()","    item = None","    ","    if product_id:","        item = product_model.get_one(product_id)","    elif product_name:","        item = product_model.get_by_name(product_name)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","    ","    purchase_quantity = int(query_params.get(\"quantity\", 0))","    ","    if purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid purchase quantity\"})","        }","    ","    if purchase_quantity > item[\"quantity\"]:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": f\"Only {item['quantity']} units available\"})","        }","    ","    new_stock = item[\"quantity\"] - purchase_quantity","    product_model.purchase_product(item[\"product_id\"], purchase_quantity)","    ","    payment_details = \"Payment process completed\"","    ","    return {","        \"statusCode\": 200,","        \"headers\": {","            \"Content-Type\": \"application/json\"","        },","        \"body\": json.dumps({","            \"status\": \"success\",","            \"message\": f\"Purchased {purchase_quantity} units of {item['product_name']}\",","            \"remaining_stock\": new_stock,","            \"payment_status\": payment_details","        }, cls=DecimalEncoder)","    }",""],"id":10},{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    body = json.loads(event.get(\"body\", \"{}\"))","    ","    product_id = body.get(\"product_id\")","    purchase_quantity = body.get(\"quantity\")","","    if not product_id or not isinstance(purchase_quantity, int) or purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid product ID or purchase quantity\"})","        }","","    product_model = ProductModel()","    item = product_model.get_one(product_id)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","","    # Call the purchase function","    result = product_model.purchase_product(product_id, purchase_quantity)","","    return {","        \"statusCode\": 200 if result[\"status\"] == \"success\" else 400,","        \"headers\": {\"Content-Type\": \"application/json\"},","        \"body\": json.dumps(result, cls=DecimalEncoder)","    }",""]}],[{"start":{"row":24,"column":0},"end":{"row":25,"column":32},"action":"remove","lines":["","    # Call the purchase function"],"id":11}],[{"start":{"row":10,"column":59},"end":{"row":10,"column":62},"action":"remove","lines":["int"],"id":13},{"start":{"row":10,"column":59},"end":{"row":10,"column":60},"action":"insert","lines":["s"]},{"start":{"row":10,"column":60},"end":{"row":10,"column":61},"action":"insert","lines":["t"]},{"start":{"row":10,"column":61},"end":{"row":10,"column":62},"action":"insert","lines":["r"]},{"start":{"row":10,"column":62},"end":{"row":10,"column":63},"action":"insert","lines":["i"]},{"start":{"row":10,"column":63},"end":{"row":10,"column":64},"action":"insert","lines":["n"]},{"start":{"row":10,"column":64},"end":{"row":10,"column":65},"action":"insert","lines":["g"]}],[{"start":{"row":10,"column":64},"end":{"row":10,"column":65},"action":"remove","lines":["g"],"id":14},{"start":{"row":10,"column":63},"end":{"row":10,"column":64},"action":"remove","lines":["n"]},{"start":{"row":10,"column":62},"end":{"row":10,"column":63},"action":"remove","lines":["i"]}],[{"start":{"row":9,"column":0},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":15},{"start":{"row":10,"column":0},"end":{"row":10,"column":1},"action":"insert","lines":["p"]},{"start":{"row":10,"column":1},"end":{"row":10,"column":2},"action":"insert","lines":["r"]}],[{"start":{"row":10,"column":2},"end":{"row":10,"column":3},"action":"insert","lines":["i"],"id":16},{"start":{"row":10,"column":3},"end":{"row":10,"column":4},"action":"insert","lines":["n"]},{"start":{"row":10,"column":4},"end":{"row":10,"column":5},"action":"insert","lines":["t"]}],[{"start":{"row":10,"column":5},"end":{"row":10,"column":7},"action":"insert","lines":["()"],"id":17}],[{"start":{"row":10,"column":6},"end":{"row":10,"column":8},"action":"insert","lines":["\"\""],"id":18}],[{"start":{"row":10,"column":7},"end":{"row":10,"column":8},"action":"insert","lines":["p"],"id":19},{"start":{"row":10,"column":8},"end":{"row":10,"column":9},"action":"insert","lines":["r"]},{"start":{"row":10,"column":9},"end":{"row":10,"column":10},"action":"insert","lines":["o"]},{"start":{"row":10,"column":10},"end":{"row":10,"column":11},"action":"insert","lines":["d"]},{"start":{"row":10,"column":11},"end":{"row":10,"column":12},"action":"insert","lines":["u"]},{"start":{"row":10,"column":12},"end":{"row":10,"column":13},"action":"insert","lines":["c"]},{"start":{"row":10,"column":13},"end":{"row":10,"column":14},"action":"insert","lines":["t"]}],[{"start":{"row":10,"column":14},"end":{"row":10,"column":15},"action":"insert","lines":["_"],"id":20},{"start":{"row":10,"column":15},"end":{"row":10,"column":16},"action":"insert","lines":["i"]},{"start":{"row":10,"column":16},"end":{"row":10,"column":17},"action":"insert","lines":["d"]}],[{"start":{"row":10,"column":6},"end":{"row":10,"column":7},"action":"remove","lines":["\""],"id":21}],[{"start":{"row":10,"column":16},"end":{"row":10,"column":17},"action":"remove","lines":["\""],"id":22}],[{"start":{"row":10,"column":0},"end":{"row":10,"column":4},"action":"insert","lines":["    "],"id":23}],[{"start":{"row":10,"column":21},"end":{"row":11,"column":0},"action":"insert","lines":["",""],"id":24},{"start":{"row":11,"column":0},"end":{"row":11,"column":4},"action":"insert","lines":["    "]},{"start":{"row":11,"column":4},"end":{"row":11,"column":5},"action":"insert","lines":["p"]},{"start":{"row":11,"column":5},"end":{"row":11,"column":6},"action":"insert","lines":["r"]},{"start":{"row":11,"column":6},"end":{"row":11,"column":7},"action":"insert","lines":["i"]}],[{"start":{"row":11,"column":7},"end":{"row":11,"column":8},"action":"insert","lines":["n"],"id":25},{"start":{"row":11,"column":8},"end":{"row":11,"column":9},"action":"insert","lines":["t"]}],[{"start":{"row":11,"column":9},"end":{"row":11,"column":11},"action":"insert","lines":["()"],"id":26}],[{"start":{"row":11,"column":10},"end":{"row":11,"column":11},"action":"insert","lines":["q"],"id":27},{"start":{"row":11,"column":11},"end":{"row":11,"column":12},"action":"insert","lines":["u"]},{"start":{"row":11,"column":12},"end":{"row":11,"column":13},"action":"insert","lines":["a"]},{"start":{"row":11,"column":13},"end":{"row":11,"column":14},"action":"insert","lines":["n"]},{"start":{"row":11,"column":14},"end":{"row":11,"column":15},"action":"insert","lines":["t"]},{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"insert","lines":["i"]},{"start":{"row":11,"column":16},"end":{"row":11,"column":17},"action":"insert","lines":["t"]},{"start":{"row":11,"column":17},"end":{"row":11,"column":18},"action":"insert","lines":["y"]}],[{"start":{"row":11,"column":10},"end":{"row":11,"column":11},"action":"insert","lines":["p"],"id":28},{"start":{"row":11,"column":11},"end":{"row":11,"column":12},"action":"insert","lines":["u"]},{"start":{"row":11,"column":12},"end":{"row":11,"column":13},"action":"insert","lines":["r"]},{"start":{"row":11,"column":13},"end":{"row":11,"column":14},"action":"insert","lines":["c"]},{"start":{"row":11,"column":14},"end":{"row":11,"column":15},"action":"insert","lines":["h"]},{"start":{"row":11,"column":15},"end":{"row":11,"column":16},"action":"insert","lines":["a"]},{"start":{"row":11,"column":16},"end":{"row":11,"column":17},"action":"insert","lines":["s"]},{"start":{"row":11,"column":17},"end":{"row":11,"column":18},"action":"insert","lines":["e"]}],[{"start":{"row":11,"column":18},"end":{"row":11,"column":19},"action":"insert","lines":["_"],"id":29}],[{"start":{"row":12,"column":22},"end":{"row":12,"column":63},"action":"remove","lines":["or not isinstance(purchase_quantity, str)"],"id":30},{"start":{"row":12,"column":21},"end":{"row":12,"column":22},"action":"remove","lines":[" "]}],[{"start":{"row":9,"column":0},"end":{"row":11,"column":28},"action":"remove","lines":["","    print(product_id)","    print(purchase_quantity)"],"id":49}],[{"start":{"row":0,"column":0},"end":{"row":32,"column":0},"action":"remove","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    body = json.loads(event.get(\"body\", \"{}\"))","    ","    product_id = body.get(\"product_id\")","    purchase_quantity = body.get(\"quantity\")","","    if not product_id or purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid product ID or purchase quantity\"})","        }","","    product_model = ProductModel()","    item = product_model.get_one(product_id)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","","    result = product_model.purchase_product(product_id, purchase_quantity)","","    return {","        \"statusCode\": 200 if result[\"status\"] == \"success\" else 400,","        \"headers\": {\"Content-Type\": \"application/json\"},","        \"body\": json.dumps(result, cls=DecimalEncoder)","    }",""],"id":51},{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    body = json.loads(event.get(\"body\", \"{}\"))","","    product_id = body.get(\"product_id\")","    product_name = body.get(\"product_name\")","    purchase_quantity = body.get(\"quantity\")","","    if not (product_id or product_name) or purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid product ID, product name, or purchase quantity\"})","        }","","    product_model = ProductModel()","    item = product_model.get_one(product_id) if product_id else product_model.get_by_name(product_name)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","","    result = product_model.purchase_product(item[\"product_id\"], purchase_quantity)","","    return {","        \"statusCode\": 200 if result else 400,","        \"headers\": {\"Content-Type\": \"application/json\"},","        \"body\": json.dumps({\"remaining_stock\": result} if result is not None else {\"status\": \"error\", \"message\": \"Not enough stock available\"}, cls=DecimalEncoder)","    }",""]}],[{"start":{"row":31,"column":28},"end":{"row":31,"column":82},"action":"remove","lines":["\"remaining_stock\": result} if result is not None else "],"id":52}],[{"start":{"row":31,"column":28},"end":{"row":31,"column":29},"action":"remove","lines":["{"],"id":53}],[{"start":{"row":31,"column":86},"end":{"row":31,"column":87},"action":"remove","lines":["}"],"id":54}],[{"start":{"row":31,"column":27},"end":{"row":31,"column":28},"action":"remove","lines":["{"],"id":55}],[{"start":{"row":31,"column":27},"end":{"row":31,"column":28},"action":"insert","lines":["{"],"id":56}],[{"start":{"row":31,"column":86},"end":{"row":31,"column":87},"action":"insert","lines":["}"],"id":57}],[{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"remove","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    body = json.loads(event.get(\"body\", \"{}\"))","","    product_id = body.get(\"product_id\")","    product_name = body.get(\"product_name\")","    purchase_quantity = body.get(\"quantity\")","","    if not (product_id or product_name) or purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid product ID, product name, or purchase quantity\"})","        }","","    product_model = ProductModel()","    item = product_model.get_one(product_id) if product_id else product_model.get_by_name(product_name)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","","    result = product_model.purchase_product(item[\"product_id\"], purchase_quantity)","","    return {","        \"statusCode\": 200 if result else 400,","        \"headers\": {\"Content-Type\": \"application/json\"},","        \"body\": json.dumps({\"status\": \"error\", \"message\": \"Not enough stock available\"}, cls=DecimalEncoder)","    }",""],"id":58},{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    body = json.loads(event.get(\"body\", \"{}\"))","    ","    product_id = body.get(\"product_id\")","    product_name = body.get(\"product_name\")","    purchase_quantity = body.get(\"quantity\")","","    if not (product_id or product_name) or purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid product ID or purchase quantity\"})","        }","","    product_model = ProductModel()","    ","    if product_id:","        item = product_model.get_one(product_id)","    else:","        item = product_model.get_by_name(product_name)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","","    result = product_model.purchase_product(item[\"product_id\"], purchase_quantity)","","    return {","        \"statusCode\": 200 if result[\"status\"] == \"success\" else 400,","        \"headers\": {\"Content-Type\": \"application/json\"},","        \"body\": json.dumps(result, cls=DecimalEncoder)","    }",""]}],[{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    body = json.loads(event.get(\"body\", \"{}\"))","    ","    product_id = body.get(\"product_id\")","    product_name = body.get(\"product_name\")","    purchase_quantity = body.get(\"quantity\")","","    if not (product_id or product_name) or purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid product ID or purchase quantity\"})","        }","","    product_model = ProductModel()","    ","    if product_id:","        item = product_model.get_one(product_id)","    else:","        item = product_model.get_by_name(product_name)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","","    result = product_model.purchase_product(item[\"product_id\"], purchase_quantity)","","    return {","        \"statusCode\": 200 if result[\"status\"] == \"success\" else 400,","        \"headers\": {\"Content-Type\": \"application/json\"},","        \"body\": json.dumps(result, cls=DecimalEncoder)","    }",""],"id":59},{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["def purchase_product(self, product_id=None, product_name=None, purchase_quantity=0):","    import boto3","    from boto3.dynamodb.conditions import Key","","    dynamodb = boto3.resource(\"dynamodb\")","    table = dynamodb.Table(self.table_name)","","    # Validate input","    if not (product_id or product_name) or purchase_quantity <= 0:","        return {\"status\": \"error\", \"message\": \"Invalid product ID, product name, or purchase quantity\"}","","    # Fetch product details","    if product_id:","        response = table.get_item(Key={\"product_id\": product_id})","        item = response.get(\"Item\")","    else:","        response = table.scan(FilterExpression=Key(\"product_name\").eq(product_name))","        items = response.get(\"Items\", [])","        item = items[0] if items else None","","    if not item:","        return {\"status\": \"error\", \"message\": \"Product not found\"}","","    # Check stock availability","    current_stock = int(item[\"quantity\"])","    if purchase_quantity > current_stock:","        return {\"status\": \"error\", \"message\": \"Not enough stock available\"}","","    # Update stock","    new_stock = current_stock - purchase_quantity","    table.update_item(","        Key={\"product_id\": item[\"product_id\"]},","        UpdateExpression=\"SET quantity = :new_quantity\",","        ExpressionAttributeValues={\":new_quantity\": new_stock}","    )","","    return {\"status\": \"success\", \"remaining_stock\": new_stock}",""]}],[{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["def purchase_product(self, product_id=None, product_name=None, purchase_quantity=0):","    import boto3","    from boto3.dynamodb.conditions import Key","","    dynamodb = boto3.resource(\"dynamodb\")","    table = dynamodb.Table(self.table_name)","","    # Validate input","    if not (product_id or product_name) or purchase_quantity <= 0:","        return {\"status\": \"error\", \"message\": \"Invalid product ID, product name, or purchase quantity\"}","","    # Fetch product details","    if product_id:","        response = table.get_item(Key={\"product_id\": product_id})","        item = response.get(\"Item\")","    else:","        response = table.scan(FilterExpression=Key(\"product_name\").eq(product_name))","        items = response.get(\"Items\", [])","        item = items[0] if items else None","","    if not item:","        return {\"status\": \"error\", \"message\": \"Product not found\"}","","    # Check stock availability","    current_stock = int(item[\"quantity\"])","    if purchase_quantity > current_stock:","        return {\"status\": \"error\", \"message\": \"Not enough stock available\"}","","    # Update stock","    new_stock = current_stock - purchase_quantity","    table.update_item(","        Key={\"product_id\": item[\"product_id\"]},","        UpdateExpression=\"SET quantity = :new_quantity\",","        ExpressionAttributeValues={\":new_quantity\": new_stock}","    )","","    return {\"status\": \"success\", \"remaining_stock\": new_stock}",""],"id":60},{"start":{"row":0,"column":0},"end":{"row":32,"column":0},"action":"insert","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    body = json.loads(event.get(\"body\", \"{}\"))","    ","    product_id = body.get(\"product_id\")","    purchase_quantity = body.get(\"quantity\")","","    if not product_id or purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid product ID or purchase quantity\"})","        }","","    product_model = ProductModel()","    item = product_model.get_one(product_id)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","","    result = product_model.purchase_product(product_id, purchase_quantity)","","    return {","        \"statusCode\": 200 if result[\"status\"] == \"success\" else 400,","        \"headers\": {\"Content-Type\": \"application/json\"},","        \"body\": json.dumps(result, cls=DecimalEncoder)","    }",""]}],[{"start":{"row":0,"column":0},"end":{"row":32,"column":0},"action":"remove","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    body = json.loads(event.get(\"body\", \"{}\"))","    ","    product_id = body.get(\"product_id\")","    purchase_quantity = body.get(\"quantity\")","","    if not product_id or purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Invalid product ID or purchase quantity\"})","        }","","    product_model = ProductModel()","    item = product_model.get_one(product_id)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","","    result = product_model.purchase_product(product_id, purchase_quantity)","","    return {","        \"statusCode\": 200 if result[\"status\"] == \"success\" else 400,","        \"headers\": {\"Content-Type\": \"application/json\"},","        \"body\": json.dumps(result, cls=DecimalEncoder)","    }",""],"id":61},{"start":{"row":0,"column":0},"end":{"row":39,"column":5},"action":"insert","lines":["import json","from models.product import ProductModel","from utils.helpers import DecimalEncoder","","def handler(event, context):","    body = json.loads(event.get(\"body\", \"{}\"))","    ","    product_id = body.get(\"product_id\")","    product_name = body.get(\"product_name\")","    purchase_quantity = body.get(\"quantity\")","","    if not (product_id or product_name) or purchase_quantity <= 0:","        return {","            \"statusCode\": 400,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Either product ID or product name required, and purchase quantity must be positive\"})","        }","","    product_model = ProductModel()","    item = None","","    if product_id:","        item = product_model.get_one(product_id)","    elif product_name:","        item = product_model.get_by_name(product_name)","","    if not item:","        return {","            \"statusCode\": 404,","            \"body\": json.dumps({\"status\": \"error\", \"message\": \"Product not found\"})","        }","","    # Use the product_id from the retrieved item to ensure consistency","    actual_product_id = item[\"product_id\"]","    result = product_model.purchase_product(actual_product_id, purchase_quantity)","","    return {","        \"statusCode\": 200 if result[\"status\"] == \"success\" else 400,","        \"headers\": {\"Content-Type\": \"application/json\"},","        \"body\": json.dumps(result, cls=DecimalEncoder)","    }"]}],[{"start":{"row":30,"column":0},"end":{"row":31,"column":70},"action":"remove","lines":["","    # Use the product_id from the retrieved item to ensure consistency"],"id":70}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":13,"column":30},"end":{"row":13,"column":30},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1741842794114,"hash":"3eb1b0b6269b8eb2db45cff195f494f66ceebfcd"}