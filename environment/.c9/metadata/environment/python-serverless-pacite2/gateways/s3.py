{"filter":false,"title":"s3.py","tooltip":"/python-serverless-pacite2/gateways/s3.py","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":52,"column":24},"action":"insert","lines":["import boto3","import urllib.parse","import csv","import codecs","","class S3Gateway:","    \"\"\"Gateway for S3 operations\"\"\"","    ","    def __init__(self, bucket_name):","        self.bucket_name = bucket_name","        self.s3_client = boto3.client('s3', region_name='us-east-2')","        self.s3_resource = boto3.resource('s3')","    ","    def download_and_read_csv_from_event(self, event):","        \"\"\"Download CSV file from S3 based on event and read its contents\"\"\"","        try:","            # Extract file location from event","            bucket = event['Records'][0]['s3']['bucket']['name']","            key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'])","            local_filename = f'/tmp/{key}'","            ","            # Download file","            self.s3_client.download_file(bucket, key, local_filename)","            ","            # Read and parse CSV","            csv_data = []","            with open(local_filename, 'r') as f:","                csv_reader = csv.DictReader(f)","                for row in csv_reader:","                    csv_data.append(row)","                    ","            return csv_data","        except Exception as e:","            print(f\"Error downloading/processing S3 file: {str(e)}\")","            return []","    ","    def create_and_upload_csv(self, filename, fieldnames, data):","        \"\"\"Create a CSV file and upload it to S3\"\"\"","        try:","            # Create local CSV file","            local_path = f'/tmp/{filename}'","            with open(local_path, 'w') as f:","                writer = csv.DictWriter(f, fieldnames=fieldnames)","                writer.writeheader()","                for row in data:","                    writer.writerow(row)","            ","            # Upload to S3","            self.s3_client.upload_file(local_path, self.bucket_name, filename)","            return True","        except Exception as e:","            print(f\"Error creating/uploading CSV: {str(e)}\")","            return False"],"id":1}],[{"start":{"row":5,"column":16},"end":{"row":6,"column":35},"action":"remove","lines":["","    \"\"\"Gateway for S3 operations\"\"\""],"id":2}],[{"start":{"row":12,"column":54},"end":{"row":13,"column":76},"action":"remove","lines":["","        \"\"\"Download CSV file from S3 based on event and read its contents\"\"\""],"id":3}],[{"start":{"row":34,"column":64},"end":{"row":35,"column":51},"action":"remove","lines":["","        \"\"\"Create a CSV file and upload it to S3\"\"\""],"id":4},{"start":{"row":34,"column":64},"end":{"row":34,"column":65},"action":"insert","lines":["\\"]}],[{"start":{"row":34,"column":64},"end":{"row":34,"column":65},"action":"remove","lines":["\\"],"id":5}]]},"ace":{"folds":[],"scrolltop":506,"scrollleft":0,"selection":{"start":{"row":34,"column":64},"end":{"row":34,"column":64},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":35,"state":"start","mode":"ace/mode/python"}},"timestamp":1741240197959,"hash":"1e08752e9d8c7d394112e756752e3ea93c1fd496"}